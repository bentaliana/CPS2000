TEST: Array Function Parameters
TASK: TASK_5
Generated: 2025-05-31 22:26:54
================================================================================

TEST: Array Function Parameters
PURPOSE: Tests array parameters, pusha instruction, and array argument passing
--------------------------------------------------------------------------------
INPUT PROGRAM:

    // Function that takes array parameter
    fun sum_array(numbers:int[5]) -> int {
        let total:int = 0;
        for (let i:int = 0; i < 5; i = i + 1) {
            total = total + numbers[i];
        }
        return total;
    }
    
    // Function with multiple array parameters
    fun process_arrays(ints:int[3], colors:colour[2]) -> bool {
        for (let i:int = 0; i < 3; i = i + 1) {
            __print ints[i];
        }
        
        for (let i:int = 0; i < 2; i = i + 1) {
            __write i, 0, colors[i];
        }
        
        return true;
    }
    
    // Function that modifies array parameter
    fun double_values(data:int[4]) -> int {
        for (let i:int = 0; i < 4; i = i + 1) {
            data[i] = data[i] * 2;
        }
        return data[0];
    }
    
    // Function returning array element
    fun get_max(values:int[3]) -> int {
        let max:int = values[0];
        if (values[1] > max) {
            max = values[1];
        }
        if (values[2] > max) {
            max = values[2];
        }
        return max;
    }
    
    // Main program with function calls
    let my_numbers:int[5] = [1, 2, 3, 4, 5];
    let my_colors:colour[2] = [#FF0000, #00FF00];
    let my_data:int[4] = [10, 20, 30, 40];
    let small_array:int[3] = [100, 200, 150];
    
    let total:int = sum_array(my_numbers);
    let success:bool = process_arrays(small_array, my_colors);
    let first_doubled:int = double_values(my_data);
    let maximum:int = get_max(small_array);
    
    __print total;
    __print first_doubled;
    __print maximum;
    

PROGRAM AST:
------------------------------------------------------------
Program
  FuncDecl: sum_array(numbers:int[5]) -> int
    Param: numbers : int[5]
    Block
      VarDecl: total : int
        Literal: 0 (int)
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 5 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Assignment
            Identifier: total
            BinaryOp: +
              Identifier: total
              IndexAccess
                Identifier: numbers
                Identifier: i
      Return
        Identifier: total
  FuncDecl: process_arrays(ints:int[3], colors:colour[2]) -> bool
    Param: ints : int[3]
    Param: colors : colour[2]
    Block
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 3 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Print
            IndexAccess
              Identifier: ints
              Identifier: i
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 2 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Write
            Identifier: i
            Literal: 0 (int)
            IndexAccess
              Identifier: colors
              Identifier: i
      Return
        Literal: True (bool)
  FuncDecl: double_values(data:int[4]) -> int
    Param: data : int[4]
    Block
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 4 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Assignment
            IndexAccess
              Identifier: data
              Identifier: i
            BinaryOp: *
              IndexAccess
                Identifier: data
                Identifier: i
              Literal: 2 (int)
      Return
        IndexAccess
          Identifier: data
          Literal: 0 (int)
  FuncDecl: get_max(values:int[3]) -> int
    Param: values : int[3]
    Block
      VarDecl: max : int
        IndexAccess
          Identifier: values
          Literal: 0 (int)
      If
        BinaryOp: >
          IndexAccess
            Identifier: values
            Literal: 1 (int)
          Identifier: max
        Block
          Assignment
            Identifier: max
            IndexAccess
              Identifier: values
              Literal: 1 (int)
      If
        BinaryOp: >
          IndexAccess
            Identifier: values
            Literal: 2 (int)
          Identifier: max
... (49 more lines)
------------------------------------------------------------

GENERATED PArIR:
------------------------------------------------------------
  0: .main
  1: push 4
  2: jmp
  3: halt
  4: push 19
  5: oframe
  6: push #PC+43
  7: jmp
  8: .sum_array
  9: push 6
 10: alloc
 11: push 0
 12: push 5
 13: push 0
 14: st
 15: push 1
 16: oframe
 17: push 0
 18: push 0
 19: push 0
 20: st
 21: push 5
 22: push [0:0]
 23: lt
 24: push #PC+4
 25: cjmp
 26: push #PC+20
 27: jmp
 28: push 0
 29: oframe
 30: push [0:1]
 31: push +[0:2]
 32: push [5:2]
 33: add
 34: push 5
 35: push 2
 36: st
 37: cframe
 38: push 1
 39: push [0:0]
 40: add
 41: push 0
 42: push 0
 43: st
 44: push #PC-24
 45: jmp
 46: cframe
 47: push [5:0]
 48: ret
 49: push #PC+65
 50: jmp
 51: .process_arrays
 52: push 5
 53: alloc
 54: push 1
 55: oframe
 56: push 0
 57: push 0
 58: push 0
 59: st
 60: push 3
 61: push [0:0]
 62: lt
 63: push #PC+4
 64: cjmp
 65: push #PC+16
 66: jmp
 67: push 0
 68: oframe
 69: push [0:1]
 70: push +[0:2]
 71: print
 72: cframe
 73: push 1
 74: push [0:0]
 75: add
 76: push 0
 77: push 0
 78: st
 79: push #PC-20
 80: jmp
 81: cframe
 82: push 1
 83: oframe
 84: push 0
 85: push 0
 86: push 0
 87: st
 88: push 2
 89: push [0:0]
 90: lt
 91: push #PC+4
 92: cjmp
 93: push #PC+18
 94: jmp
 95: push 0
 96: oframe
 97: push [0:1]
 98: push +[3:2]
 99: push 0
100: push [0:1]
101: write
102: cframe
103: push 1
104: push [0:0]
105: add
106: push 0
107: push 0
108: st
109: push #PC-22
110: jmp
111: cframe
112: push 1
113: ret
114: push #PC+42
115: jmp
116: .double_values
117: push 4
118: alloc
119: push 1
120: oframe
121: push 0
122: push 0
123: push 0
124: st
125: push 4
126: push [0:0]
127: lt
128: push #PC+4
129: cjmp
130: push #PC+22
131: jmp
132: push 0
133: oframe
134: push 2
135: push [0:1]
136: push +[0:2]
137: mul
138: push [0:1]
139: push 0
140: add
141: push 2
142: st
143: cframe
144: push 1
145: push [0:0]
146: add
147: push 0
148: push 0
149: st
150: push #PC-26
151: jmp
152: cframe
153: push 0
154: push +[0:0]
155: ret
156: push #PC+44
157: jmp
158: .get_max
159: push 4
160: alloc
161: push 0
162: push +[0:0]
163: push 3
164: push 0
165: st
166: push [3:0]
167: push 1
168: push +[0:0]
169: gt
170: push #PC+4
171: cjmp
172: push #PC+10
173: jmp
174: push 0
175: oframe
176: push 1
177: push +[0:1]
178: push 3
179: push 1
180: st
181: cframe
182: push [3:0]
183: push 2
184: push +[0:0]
185: gt
186: push #PC+4
187: cjmp
188: push #PC+10
189: jmp
190: push 0
191: oframe
192: push 2
193: push +[0:1]
194: push 3
195: push 1
196: st
197: cframe
198: push [3:0]
199: ret
200: push 5
201: push 4
202: push 3
203: push 2
204: push 1
205: push 5
206: push 1
207: push 0
208: sta
209: push #00FF00
210: push #FF0000
211: push 2
212: push 6
213: push 0
214: sta
215: push 40
216: push 30
217: push 20
218: push 10
219: push 4
220: push 8
221: push 0
222: sta
223: push 150
224: push 200
225: push 100
226: push 3
227: push 12
228: push 0
229: sta
230: push 5
231: pusha [1:0]
232: push 5
233: push .sum_array
234: call
235: push 15
236: push 0
237: st
238: push 2
239: pusha [6:0]
240: push 3
241: pusha [12:0]
242: push 5
243: push .process_arrays
244: call
245: push 16
246: push 0
247: st
248: push 4
249: pusha [8:0]
250: push 4
251: push .double_values
252: call
253: push 17
254: push 0
255: st
256: push 3
257: pusha [12:0]
258: push 3
259: push .get_max
260: call
261: push 18
262: push 0
263: st
264: push [15:0]
265: print
266: push [17:0]
267: print
268: push [18:0]
269: print
270: cframe
271: halt
------------------------------------------------------------

ARRAY PARAMETER ANALYSIS:
Function definitions: 4
  .sum_array
  .process_arrays
  .double_values
  .get_max

Array push operations (pusha): 5
  pusha [1:0]
  pusha [6:0]
  pusha [12:0]
  pusha [8:0]
  pusha [12:0]

Function calls: 4
  call
  call
  call
  call

Array function parameters successful

ARRAY FUNCTION PARAMETERS: Successfully completed

================================================================================

