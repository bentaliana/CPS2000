TEST: Array Function Parameters
TASK: TASK_5
Generated: 2025-06-01 20:30:29
================================================================================

TEST: Array Function Parameters
PURPOSE: Tests array parameters and array argument passing
--------------------------------------------------------------------------------
INPUT PROGRAM:

    // Function that takes array parameter
    fun sum_array(numbers:int[5]) -> int {
        let total:int = 0;
        for (let i:int = 0; i < 5; i = i + 1) {
            total = total + numbers[i];
        }
        return total;
    }
    
    // Function with multiple array parameters
    fun process_arrays(ints:int[3], colors:colour[2]) -> bool {
        for (let i:int = 0; i < 3; i = i + 1) {
            __print ints[i];
        }
        
        for (let i:int = 0; i < 2; i = i + 1) {
            __write i, 0, colors[i];
        }
        
        return true;
    }
    
    // Function that modifies array parameter
    fun double_values(data:int[4]) -> int {
        for (let i:int = 0; i < 4; i = i + 1) {
            data[i] = data[i] * 2;
        }
        return data[0];
    }
    
    // Function returning array element
    fun get_max(values:int[3]) -> int {
        let max:int = values[0];
        if (values[1] > max) {
            max = values[1];
        }
        if (values[2] > max) {
            max = values[2];
        }
        return max;
    }
    
    // Main program with function calls
    let my_numbers:int[5] = [1, 2, 3, 4, 5];
    let my_colors:colour[2] = [#FF0000, #00FF00];
    let my_data:int[4] = [10, 20, 30, 40];
    let small_array:int[3] = [100, 200, 150];
    
    let total:int = sum_array(my_numbers);
    let success:bool = process_arrays(small_array, my_colors);
    let first_doubled:int = double_values(my_data);
    let maximum:int = get_max(small_array);
    
    __print total;
    __print first_doubled;
    __print maximum;
    

PROGRAM AST:
------------------------------------------------------------
Program
  FuncDecl: sum_array(numbers:int[5]) -> int
    Param: numbers : int[5]
    Block
      VarDecl: total : int
        Literal: 0 (int)
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 5 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Assignment
            Identifier: total
            BinaryOp: +
              Identifier: total
              IndexAccess
                Identifier: numbers
                Identifier: i
      Return
        Identifier: total
  FuncDecl: process_arrays(ints:int[3], colors:colour[2]) -> bool
    Param: ints : int[3]
    Param: colors : colour[2]
    Block
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 3 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Print
            IndexAccess
              Identifier: ints
              Identifier: i
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 2 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Write
            Identifier: i
            Literal: 0 (int)
            IndexAccess
              Identifier: colors
              Identifier: i
      Return
        Literal: True (bool)
  FuncDecl: double_values(data:int[4]) -> int
    Param: data : int[4]
    Block
      For
        VarDecl: i : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: i
          Literal: 4 (int)
        Assignment
          Identifier: i
          BinaryOp: +
            Identifier: i
            Literal: 1 (int)
        Block
          Assignment
            IndexAccess
              Identifier: data
              Identifier: i
            BinaryOp: *
              IndexAccess
                Identifier: data
                Identifier: i
              Literal: 2 (int)
      Return
        IndexAccess
          Identifier: data
          Literal: 0 (int)
  FuncDecl: get_max(values:int[3]) -> int
    Param: values : int[3]
    Block
      VarDecl: max : int
        IndexAccess
          Identifier: values
          Literal: 0 (int)
      If
        BinaryOp: >
          IndexAccess
            Identifier: values
            Literal: 1 (int)
          Identifier: max
        Block
          Assignment
            Identifier: max
            IndexAccess
              Identifier: values
              Literal: 1 (int)
      If
        BinaryOp: >
          IndexAccess
            Identifier: values
            Literal: 2 (int)
          Identifier: max
... (49 more lines)
------------------------------------------------------------

GENERATED PArIR:
------------------------------------------------------------
.main
push 4
jmp
halt
push 19
oframe
push #PC+43
jmp
.sum_array
push 6
alloc
push 0
push 5
push 0
st
push 1
oframe
push 0
push 0
push 0
st
push 5
push [0:0]
lt
push #PC+4
cjmp
push #PC+20
jmp
push 0
oframe
push [0:1]
push +[0:2]
push [5:2]
add
push 5
push 2
st
cframe
push 1
push [0:0]
add
push 0
push 0
st
push #PC-24
jmp
cframe
push [5:0]
ret
push #PC+65
jmp
.process_arrays
push 5
alloc
push 1
oframe
push 0
push 0
push 0
st
push 3
push [0:0]
lt
push #PC+4
cjmp
push #PC+16
jmp
push 0
oframe
push [0:1]
push +[0:2]
print
cframe
push 1
push [0:0]
add
push 0
push 0
st
push #PC-20
jmp
cframe
push 1
oframe
push 0
push 0
push 0
st
push 2
push [0:0]
lt
push #PC+4
cjmp
push #PC+18
jmp
push 0
oframe
push [0:1]
push +[3:2]
push 0
push [0:1]
write
cframe
push 1
push [0:0]
add
push 0
push 0
st
push #PC-22
jmp
cframe
push 1
ret
push #PC+42
jmp
.double_values
push 4
alloc
push 1
oframe
push 0
push 0
push 0
st
push 4
push [0:0]
lt
push #PC+4
cjmp
push #PC+22
jmp
push 0
oframe
push 2
push [0:1]
push +[0:2]
mul
push [0:1]
push 0
add
push 2
st
cframe
push 1
push [0:0]
add
push 0
push 0
st
push #PC-26
jmp
cframe
push 0
push +[0:0]
ret
push #PC+44
jmp
.get_max
push 4
alloc
push 0
push +[0:0]
push 3
push 0
st
push [3:0]
push 1
push +[0:0]
gt
push #PC+4
cjmp
push #PC+10
jmp
push 0
oframe
push 1
push +[0:1]
push 3
push 1
st
cframe
push [3:0]
push 2
push +[0:0]
gt
push #PC+4
cjmp
push #PC+10
jmp
push 0
oframe
push 2
push +[0:1]
push 3
push 1
st
cframe
push [3:0]
ret
push 5
push 4
push 3
push 2
push 1
push 5
push 1
push 0
sta
push #00FF00
push #FF0000
push 2
push 6
push 0
sta
push 40
push 30
push 20
push 10
push 4
push 8
push 0
sta
push 150
push 200
push 100
push 3
push 12
push 0
sta
push 4
push +[1:0]
push 3
push +[1:0]
push 2
push +[1:0]
push 1
push +[1:0]
push 0
push +[1:0]
push 5
push .sum_array
call
push 15
push 0
st
push 1
push +[6:0]
push 0
push +[6:0]
push 2
push +[12:0]
push 1
push +[12:0]
push 0
push +[12:0]
push 5
push .process_arrays
call
push 16
push 0
st
push 3
push +[8:0]
push 2
push +[8:0]
push 1
push +[8:0]
push 0
push +[8:0]
push 4
push .double_values
call
push 17
push 0
st
push 2
push +[12:0]
push 1
push +[12:0]
push 0
push +[12:0]
push 3
push .get_max
call
push 18
push 0
st
push [15:0]
print
push [17:0]
print
push [18:0]
print
cframe
halt
------------------------------------------------------------

ARRAY PARAMETER ANALYSIS:
Function definitions: 4
  .sum_array
  .process_arrays
  .double_values
  .get_max

Array element push operations (push +[...]): 27
  push +[0:2]
  push +[0:2]
  push +[3:2]
  push +[0:2]
  push +[0:0]
  push +[0:0]
  push +[0:0]
  push +[0:1]
  push +[0:0]
  push +[0:1]
  ... and 17 more

Function calls: 4
  call
  call
  call
  call

Array function parameters successful

ARRAY FUNCTION PARAMETERS: Successfully completed

================================================================================

