TEST: Rainbow Pattern
TASK: SIMULATOR
Generated: 2025-05-31 22:26:54
================================================================================

TEST: Rainbow Pattern
PURPOSE: Animated rainbow pattern using color array
--------------------------------------------------------------------------------
INPUT PROGRAM:

    fun draw_pattern(offset:int) -> bool {
        let colors:colour[] = [#FF0000, #FF7F00, #FFFF00, #00FF00, #0000FF, #4B0082, #9400D3];

        for (let x:int = 0; x < __width; x = x + 3) {
            for (let y:int = 0; y < __height; y = y + 3) {                        
                let colorIndex:int = (x + y + offset) % 7;
                __write_box x, y, 2, 2, colors[colorIndex];
            }
        }

        return true;
    }

    let offset:int = 0;
    let r:bool = false;

    while (true) {
        r = draw_pattern(offset);
        offset = offset + 1;
        __delay 10;
    }
    

PROGRAM AST:
------------------------------------------------------------
Program
  FuncDecl: draw_pattern(offset:int) -> bool
    Param: offset : int
    Block
      VarDecl: colors : colour[7]
        ArrayLiteral: [7 elements]
          Literal: #FF0000 (colour)
          Literal: #FF7F00 (colour)
          Literal: #FFFF00 (colour)
          Literal: #00FF00 (colour)
          Literal: #0000FF (colour)
          Literal: #4B0082 (colour)
          Literal: #9400D3 (colour)
      For
        VarDecl: x : int
          Literal: 0 (int)
        BinaryOp: <
          Identifier: x
          BuiltIn: __width
        Assignment
          Identifier: x
          BinaryOp: +
            Identifier: x
            Literal: 3 (int)
        Block
          For
            VarDecl: y : int
              Literal: 0 (int)
            BinaryOp: <
              Identifier: y
              BuiltIn: __height
            Assignment
              Identifier: y
              BinaryOp: +
                Identifier: y
                Literal: 3 (int)
            Block
              VarDecl: colorIndex : int
                BinaryOp: %
                  BinaryOp: +
                    BinaryOp: +
                      Identifier: x
                      Identifier: y
                    Identifier: offset
                  Literal: 7 (int)
              WriteBox
                Identifier: x
                Identifier: y
                Literal: 2 (int)
                Literal: 2 (int)
                IndexAccess
                  Identifier: colors
                  Identifier: colorIndex
      Return
        Literal: True (bool)
  VarDecl: offset : int
    Literal: 0 (int)
  VarDecl: r : bool
    Literal: False (bool)
  While
    Literal: True (bool)
    Block
      Assignment
        Identifier: r
        FuncCall: draw_pattern
          Identifier: offset
      Assignment
        Identifier: offset
        BinaryOp: +
          Identifier: offset
          Literal: 1 (int)
      Delay
        Literal: 10 (int)
------------------------------------------------------------

GENERATED PArIR:
------------------------------------------------------------
.main
push 4
jmp
halt
push 3
oframe
push #PC+85
jmp
.draw_pattern
push 8
alloc
push #9400D3
push #4B0082
push #0000FF
push #00FF00
push #FFFF00
push #FF7F00
push #FF0000
push 7
push 1
push 0
sta
push 1
oframe
push 0
push 0
push 0
st
width
push [0:0]
lt
push #PC+4
cjmp
push #PC+55
jmp
push 0
oframe
push 1
oframe
push 0
push 0
push 0
st
height
push [0:0]
lt
push #PC+4
cjmp
push #PC+30
jmp
push 1
oframe
push 7
push [0:4]
push [0:1]
push [0:3]
add
add
mod
push 0
push 0
st
push [0:0]
push +[1:4]
push 2
push 2
push [0:1]
push [0:3]
writebox
cframe
push 3
push [0:0]
add
push 0
push 0
st
push #PC-34
jmp
cframe
cframe
push 3
push [0:0]
add
push 0
push 0
st
push #PC-59
jmp
cframe
push 1
ret
push 0
push 1
push 0
st
push 0
push 2
push 0
st
push 1
push #PC+4
cjmp
push #PC+22
jmp
push 0
oframe
push [1:1]
push 1
push .draw_pattern
call
push 2
push 1
st
push 1
push [1:1]
add
push 1
push 1
st
push 10
delay
cframe
push #PC-23
jmp
cframe
halt
------------------------------------------------------------

Total instructions: 126

Rainbow pattern ready for simulator
Creates animated rainbow pattern with color arrays
Uses infinite loop - may need manual termination in simulator

COMPILATION: Successfully completed

================================================================================

