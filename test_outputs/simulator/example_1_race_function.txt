TEST: Race Function
TASK: SIMULATOR
Generated: 2025-06-01 02:59:25
================================================================================

TEST: Race Function
PURPOSE: Complete Race function with graphics output
--------------------------------------------------------------------------------
INPUT PROGRAM:

    fun Race(p1_c:colour, p2_c:colour, score_max:int) -> int {
        let p1_score:int = 0;
        let p2_score:int = 0;
        
        while ((p1_score < score_max) and (p2_score < score_max)) {
            let p1_toss:int = __randi 1000;
            let p2_toss:int = __randi 1000;
            
            if (p1_toss > p2_toss) {
                p1_score = p1_score + 1;
                __write 1, p1_score, p1_c;
            } else {
                p2_score = p2_score + 1;
                __write 2, p2_score, p2_c;
            }
            
            __delay 100;
        }
        
        if (p2_score > p1_score) {
            return 2;
        }
        
        return 1;
    }
    
    // Execution starts here
    let c1:colour = #00ff00; //green
    let c2:colour = #0000ff; //blue
    let m:int = __height; //the height (y-values) of the pad
    let w:int = Race(c1, c2, m); //call function Race
    __print w; //prints value of expression to VM logs
    

PROGRAM AST:
------------------------------------------------------------
Program
  FuncDecl: Race(p1_c:colour, p2_c:colour, score_max:int) -> int
    Param: p1_c : colour
    Param: p2_c : colour
    Param: score_max : int
    Block
      VarDecl: p1_score : int
        Literal: 0 (int)
      VarDecl: p2_score : int
        Literal: 0 (int)
      While
        BinaryOp: and
          BinaryOp: <
            Identifier: p1_score
            Identifier: score_max
          BinaryOp: <
            Identifier: p2_score
            Identifier: score_max
        Block
          VarDecl: p1_toss : int
            BuiltIn: __randi
              Literal: 1000 (int)
          VarDecl: p2_toss : int
            BuiltIn: __randi
              Literal: 1000 (int)
          If
            BinaryOp: >
              Identifier: p1_toss
              Identifier: p2_toss
            Block
              Assignment
                Identifier: p1_score
                BinaryOp: +
                  Identifier: p1_score
                  Literal: 1 (int)
              Write
                Literal: 1 (int)
                Identifier: p1_score
                Identifier: p1_c
            Block
              Assignment
                Identifier: p2_score
                BinaryOp: +
                  Identifier: p2_score
                  Literal: 1 (int)
              Write
                Literal: 2 (int)
                Identifier: p2_score
                Identifier: p2_c
          Delay
            Literal: 100 (int)
      If
        BinaryOp: >
          Identifier: p2_score
          Identifier: p1_score
        Block
          Return
            Literal: 2 (int)
      Return
        Literal: 1 (int)
  VarDecl: c1 : colour
    Literal: #00ff00 (colour)
  VarDecl: c2 : colour
    Literal: #0000ff (colour)
  VarDecl: m : int
    BuiltIn: __height
  VarDecl: w : int
    FuncCall: Race
      Identifier: c1
      Identifier: c2
      Identifier: m
  Print
    Identifier: w
------------------------------------------------------------

GENERATED PArIR:
------------------------------------------------------------
.main
push 4
jmp
halt
push 5
oframe
push #PC+90
jmp
.Race
push 5
alloc
push 0
push 3
push 0
st
push 0
push 4
push 0
st
push [2:0]
push [4:0]
lt
push [2:0]
push [3:0]
lt
and
push #PC+4
cjmp
push #PC+54
jmp
push 2
oframe
push 1000
irnd
push 0
push 0
st
push 1000
irnd
push 1
push 0
st
push [1:0]
push [0:0]
gt
push #PC+4
cjmp
push #PC+17
jmp
push 0
oframe
push 1
push [3:2]
add
push 3
push 2
st
push [0:2]
push [3:2]
push 1
write
cframe
push #PC+15
jmp
push 0
oframe
push 1
push [4:2]
add
push 4
push 2
st
push [1:2]
push [4:2]
push 2
write
cframe
push 100
delay
cframe
push #PC-61
jmp
push [3:0]
push [4:0]
gt
push #PC+4
cjmp
push #PC+7
jmp
push 0
oframe
push 2
ret
cframe
push 1
ret
push #00ff00
push 1
push 0
st
push #0000ff
push 2
push 0
st
height
push 3
push 0
st
push [3:0]
push [2:0]
push [1:0]
push 3
push .Race
call
push 4
push 0
st
push [4:0]
print
cframe
halt
------------------------------------------------------------

Total instructions: 121

Race function compiled successfully for simulator
Ready for execution in PAD2000c simulator

COMPILATION: Successfully completed

================================================================================

