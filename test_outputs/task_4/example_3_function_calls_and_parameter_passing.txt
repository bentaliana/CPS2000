TEST: Function Calls and Parameter Passing
TASK: TASK_4
Generated: 2025-06-01 20:30:29
================================================================================

TEST: Function Calls and Parameter Passing
PURPOSE: Tests function definitions, calls, parameter passing, and returns
--------------------------------------------------------------------------------
INPUT PROGRAM:

    
    fun multiply_and_check(a:int, b:int) -> bool {
        let result:int = a * b;
        if (result > 100) {
            return true;
        }
        return false;
    }
    
    fun complex_calculation(base:int, factor:float) -> float {
        let temp:float = base as float;
        let result:float = temp * factor;
        if (result > 50.0) {
            result = result / 2.0;
        }
        return result;
    }
    
    // Function calls in main
    let is_large:bool = multiply_and_check(12, 9);
    let calc_result:float = complex_calculation(20, 2.5);
    
    __print is_large;
    __print calc_result as int;
    

PROGRAM AST:
------------------------------------------------------------
Program
  FuncDecl: multiply_and_check(a:int, b:int) -> bool
    Param: a : int
    Param: b : int
    Block
      VarDecl: result : int
        BinaryOp: *
          Identifier: a
          Identifier: b
      If
        BinaryOp: >
          Identifier: result
          Literal: 100 (int)
        Block
          Return
            Literal: True (bool)
      Return
        Literal: False (bool)
  FuncDecl: complex_calculation(base:int, factor:float) -> float
    Param: base : int
    Param: factor : float
    Block
      VarDecl: temp : float
        Cast -> float
          Identifier: base
      VarDecl: result : float
        BinaryOp: *
          Identifier: temp
          Identifier: factor
      If
        BinaryOp: >
          Identifier: result
          Literal: 50.0 (float)
        Block
          Assignment
            Identifier: result
            BinaryOp: /
              Identifier: result
              Literal: 2.0 (float)
      Return
        Identifier: result
  VarDecl: is_large : bool
    FuncCall: multiply_and_check
      Literal: 12 (int)
      Literal: 9 (int)
  VarDecl: calc_result : float
    FuncCall: complex_calculation
      Literal: 20 (int)
      Literal: 2.5 (float)
  Print
    Identifier: is_large
  Print
    Cast -> int
      Identifier: calc_result
------------------------------------------------------------

GENERATED PArIR:
------------------------------------------------------------
.main
push 4
jmp
halt
push 3
oframe
push #PC+25
jmp
.multiply_and_check
push 3
alloc
push [1:0]
push [0:0]
mul
push 2
push 0
st
push 100
push [2:0]
gt
push #PC+4
cjmp
push #PC+7
jmp
push 0
oframe
push 1
ret
cframe
push 0
ret
push #PC+33
jmp
.complex_calculation
push 4
alloc
push [0:0]
push 2
push 0
st
push [1:0]
push [2:0]
mul
push 3
push 0
st
push 50.0
push [3:0]
gt
push #PC+4
cjmp
push #PC+11
jmp
push 0
oframe
push 2.0
push [3:1]
div
push 3
push 1
st
cframe
push [3:0]
ret
push 9
push 12
push 2
push .multiply_and_check
call
push 1
push 0
st
push 2.5
push 20
push 2
push .complex_calculation
call
push 2
push 0
st
push [1:0]
print
push [2:0]
print
cframe
halt
------------------------------------------------------------

FUNCTION ANALYSIS:
Function labels: 3
  .main
  .multiply_and_check
  .complex_calculation

Function calls: 2
  call
  call

Return statements: 3
Memory allocations: 2

EXPECTATIONS CHECK:
Expected functions: 2, Found: 3
Expected calls: 2, Found: 2
Expected returns: 2, Found: 3

Function call generation successful

FUNCTION CALLS AND PARAMETERS: Successfully completed

================================================================================

