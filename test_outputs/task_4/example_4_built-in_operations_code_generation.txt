TEST: Built-in Operations Code Generation
TASK: TASK_4
Generated: 2025-06-01 18:52:02
================================================================================

TEST: Built-in Operations Code Generation
PURPOSE: Tests built-in functions: print, delay, write, write_box, clear, etc.
--------------------------------------------------------------------------------
INPUT PROGRAM:

    // Basic built-ins with literals
    __print 42;
    __delay 1000;
    __clear #000000;
    
    // Graphics operations
    __write 10, 20, #FF0000;
    __write_box 5, 5, 10, 10, #00FF00;
    
    // Built-ins with expressions
    let x:int = 15;
    let y:int = 25;
    let color:colour = #0000FF;
    
    __write x, y, color;
    __write_box x - 5, y - 5, 20, 20, color;
    
    // Built-in expressions
    let width:int = __width;
    let height:int = __height;
    let random_num:int = __randi 100;
    let pixel_color:colour = __read 0, 0;
    
    // Complex usage
    for (let i:int = 0; i < 5; i = i + 1) {
        let rand_x:int = __randi width;
        let rand_y:int = __randi height;
        let rand_color:colour = (__randi 16777216) as colour;
        
        __write rand_x, rand_y, rand_color;
        __delay 100;
        
        if (i % 2 == 0) {
            __write_box rand_x, rand_y, 3, 3, #FFFFFF;
        }
    }
    
    __print width;
    __print height;
    __print random_num;
    

PROGRAM AST:
------------------------------------------------------------
Program
  Print
    Literal: 42 (int)
  Delay
    Literal: 1000 (int)
  Clear
    Literal: #000000 (colour)
  Write
    Literal: 10 (int)
    Literal: 20 (int)
    Literal: #FF0000 (colour)
  WriteBox
    Literal: 5 (int)
    Literal: 5 (int)
    Literal: 10 (int)
    Literal: 10 (int)
    Literal: #00FF00 (colour)
  VarDecl: x : int
    Literal: 15 (int)
  VarDecl: y : int
    Literal: 25 (int)
  VarDecl: color : colour
    Literal: #0000FF (colour)
  Write
    Identifier: x
    Identifier: y
    Identifier: color
  WriteBox
    BinaryOp: -
      Identifier: x
      Literal: 5 (int)
    BinaryOp: -
      Identifier: y
      Literal: 5 (int)
    Literal: 20 (int)
    Literal: 20 (int)
    Identifier: color
  VarDecl: width : int
    BuiltIn: __width
  VarDecl: height : int
    BuiltIn: __height
  VarDecl: random_num : int
    BuiltIn: __randi
      Literal: 100 (int)
  VarDecl: pixel_color : colour
    BuiltIn: __read
      Literal: 0 (int)
      Literal: 0 (int)
  For
    VarDecl: i : int
      Literal: 0 (int)
    BinaryOp: <
      Identifier: i
      Literal: 5 (int)
    Assignment
      Identifier: i
      BinaryOp: +
        Identifier: i
        Literal: 1 (int)
    Block
      VarDecl: rand_x : int
        BuiltIn: __randi
          Identifier: width
      VarDecl: rand_y : int
        BuiltIn: __randi
          Identifier: height
      VarDecl: rand_color : colour
        Cast -> colour
          BuiltIn: __randi
            Literal: 16777216 (int)
      Write
        Identifier: rand_x
        Identifier: rand_y
        Identifier: rand_color
      Delay
        Literal: 100 (int)
      If
        BinaryOp: ==
          BinaryOp: %
            Identifier: i
... (15 more lines)
------------------------------------------------------------

GENERATED PArIR:
------------------------------------------------------------
.main
push 4
jmp
halt
push 8
oframe
push 42
print
push 1000
delay
push #000000
clear
push #FF0000
push 20
push 10
write
push #00FF00
push 10
push 10
push 5
push 5
writebox
push 15
push 1
push 0
st
push 25
push 2
push 0
st
push #0000FF
push 3
push 0
st
push [3:0]
push [2:0]
push [1:0]
write
push [3:0]
push 20
push 20
push 5
push [2:0]
sub
push 5
push [1:0]
sub
writebox
width
push 4
push 0
st
height
push 5
push 0
st
push 100
irnd
push 6
push 0
st
push 0
push 0
read
push 7
push 0
st
push 1
oframe
push 0
push 0
push 0
st
push 5
push [0:0]
lt
push #PC+4
cjmp
push #PC+52
jmp
push 3
oframe
push [4:2]
irnd
push 0
push 0
st
push [5:2]
irnd
push 1
push 0
st
push 16777216
irnd
push 2
push 0
st
push [2:0]
push [1:0]
push [0:0]
write
push 100
delay
push 0
push 2
push [0:1]
mod
eq
push #PC+4
cjmp
push #PC+11
jmp
push 0
oframe
push #FFFFFF
push 3
push 3
push [1:1]
push [0:1]
writebox
cframe
cframe
push 1
push [0:0]
add
push 0
push 0
st
push #PC-56
jmp
cframe
push [4:0]
print
push [5:0]
print
push [6:0]
print
cframe
halt
------------------------------------------------------------

BUILT-IN OPERATIONS ANALYSIS:
Built-in operation frequency:
  print: 4
  delay: 2
  write: 6
  writebox: 3
  clear: 1
  width: 1
  height: 1
  irnd: 4
  read: 1

Expected built-ins: 8
Found built-ins: 9
All expected built-in operations found

Graphics operations:
  write operations: 3
  writebox operations: 3

Built-in operations generation successful

BUILT-IN OPERATIONS: Successfully completed

================================================================================

