TEST: Scope Management and Variable Declaration
TASK: TASK_3
Generated: 2025-06-01 18:52:02
================================================================================

TEST: Scope Management and Variable Declaration
PURPOSE: Tests scoping rules, variable redeclaration, and symbol table management
--------------------------------------------------------------------------------
INPUT PROGRAM:

    // Global scope variables
    let global_x:int = 42;
    let global_y:float = 3.14;
    
    fun test_scope(param_x:int, param_y:int) -> bool {
        // Function scope - should not conflict with global
        let local_x:int = param_x + 10;
        let local_y:int = param_y * 2;
        
        // This should cause error - parameter redeclaration
        let param_x:int = 100;
        
        if (local_x > 50) {
            // Block scope
            let block_var:bool = true;
            let local_x:int = 999;  // Should shadow outer local_x
            
            // Nested block
            {
                let nested_var:colour = #00FF00;
                let block_var:bool = false;  // Should shadow block_var
            }
            
            // block_var should be accessible here
            return block_var;
        }
        
        // block_var should NOT be accessible here
        return block_var;  // Should cause undeclared variable error
    }
    
    // Back in global scope
    let global_x:int = 100;  // Should cause redeclaration error
    
    // Test variable usage before declaration
    let use_undeclared:int = undefined_var + 5;
    
    fun another_function() -> int {
        // Should be able to access global variables
        return global_y as int + global_x;
    }
    

PROGRAM AST:
------------------------------------------------------------
Program
  VarDecl: global_x : int
    Literal: 42 (int)
  VarDecl: global_y : float
    Literal: 3.14 (float)
  FuncDecl: test_scope(param_x:int, param_y:int) -> bool
    Param: param_x : int
    Param: param_y : int
    Block
      VarDecl: local_x : int
        BinaryOp: +
          Identifier: param_x
          Literal: 10 (int)
      VarDecl: local_y : int
        BinaryOp: *
          Identifier: param_y
          Literal: 2 (int)
      VarDecl: param_x : int
        Literal: 100 (int)
      If
        BinaryOp: >
          Identifier: local_x
          Literal: 50 (int)
        Block
          VarDecl: block_var : bool
            Literal: True (bool)
          VarDecl: local_x : int
            Literal: 999 (int)
          Block
            VarDecl: nested_var : colour
              Literal: #00FF00 (colour)
            VarDecl: block_var : bool
              Literal: False (bool)
          Return
            Identifier: block_var
      Return
        Identifier: block_var
  VarDecl: global_x : int
    Literal: 100 (int)
  VarDecl: use_undeclared : int
    BinaryOp: +
      Identifier: undefined_var
      Literal: 5 (int)
  FuncDecl: another_function() -> int
    Block
      Return
        BinaryOp: +
          Cast -> int
            Identifier: global_y
          Identifier: global_x
------------------------------------------------------------

SCOPE ANALYSIS RESULTS:
------------------------------------------------------------
Semantic errors detected:
  • Semantic Error at line 11, col 9: Variable 'param_x' conflicts with function parameter
  • Semantic Error at line 29, col 16: Undeclared variable 'block_var'
  • Semantic Error at line 33, col 5: Variable 'global_x' already declared in current scope
  • Semantic Error at line 36, col 30: Undeclared variable 'undefined_var'

Error type summary:
  undeclared: 2

Scope management analysis completed

SCOPE MANAGEMENT: Successfully completed

================================================================================

