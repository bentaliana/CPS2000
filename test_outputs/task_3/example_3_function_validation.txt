TEST: Function Validation
TASK: TASK_3
Generated: 2025-06-01 20:30:29
================================================================================

TEST: Function Validation
PURPOSE: Tests function declarations, return types, parameter matching, and calls
--------------------------------------------------------------------------------
INPUT PROGRAM:

    // Valid function declarations
    fun add(x:int, y:int) -> int {
        return x + y;
    }
    
    fun multiply(a:float, b:float) -> float {
        return a * b;
    }
    
    fun is_positive(value:int) -> bool {
        if (value > 0) {
            return true;
        }
        return false;
    }
    
    // Function missing return (should cause error)
    fun missing_return(x:int) -> int {
        __print x;
        // Missing return statement
    }
    
    // Function with wrong return type
    fun wrong_return_type(x:int) -> bool {
        return x + 1;  // Should return bool, not int
    }
    
    // Function with unreachable code after return
    fun unreachable_code(x:int) -> int {
        return x * 2;
        __print x;  // This is unreachable
    }
    
    // Valid function calls
    let result1:int = add(5, 3);
    let result2:float = multiply(2.5, 4.0);
    let result3:bool = is_positive(result1);
    
    // Invalid function calls
    let error1:int = add(5);           // Wrong argument count
    let error2:int = add(5.0, 3.0);    // Wrong argument types
    let error3:bool = multiply(2, 3);   // Wrong types and assignment
    let error4:int = undefined_func(5); // Undeclared function
    
    // Recursive function (should be valid)
    fun factorial(n:int) -> int {
        if (n <= 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }
    
    let fact5:int = factorial(5);
    

PROGRAM AST:
------------------------------------------------------------
Program
  FuncDecl: add(x:int, y:int) -> int
    Param: x : int
    Param: y : int
    Block
      Return
        BinaryOp: +
          Identifier: x
          Identifier: y
  FuncDecl: multiply(a:float, b:float) -> float
    Param: a : float
    Param: b : float
    Block
      Return
        BinaryOp: *
          Identifier: a
          Identifier: b
  FuncDecl: is_positive(value:int) -> bool
    Param: value : int
    Block
      If
        BinaryOp: >
          Identifier: value
          Literal: 0 (int)
        Block
          Return
            Literal: True (bool)
      Return
        Literal: False (bool)
  FuncDecl: missing_return(x:int) -> int
    Param: x : int
    Block
      Print
        Identifier: x
  FuncDecl: wrong_return_type(x:int) -> bool
    Param: x : int
    Block
      Return
        BinaryOp: +
          Identifier: x
          Literal: 1 (int)
  FuncDecl: unreachable_code(x:int) -> int
    Param: x : int
    Block
      Return
        BinaryOp: *
          Identifier: x
          Literal: 2 (int)
      Print
        Identifier: x
  VarDecl: result1 : int
    FuncCall: add
      Literal: 5 (int)
      Literal: 3 (int)
  VarDecl: result2 : float
    FuncCall: multiply
      Literal: 2.5 (float)
      Literal: 4.0 (float)
  VarDecl: result3 : bool
    FuncCall: is_positive
      Identifier: result1
  VarDecl: error1 : int
    FuncCall: add
      Literal: 5 (int)
  VarDecl: error2 : int
    FuncCall: add
      Literal: 5.0 (float)
      Literal: 3.0 (float)
  VarDecl: error3 : bool
    FuncCall: multiply
      Literal: 2 (int)
      Literal: 3 (int)
  VarDecl: error4 : int
    FuncCall: undefined_func
      Literal: 5 (int)
  FuncDecl: factorial(n:int) -> int
    Param: n : int
    Block
      If
        BinaryOp: <=
          Identifier: n
          Literal: 1 (int)
        Block
          Return
            Literal: 1 (int)
      Return
        BinaryOp: *
          Identifier: n
          FuncCall: factorial
            BinaryOp: -
              Identifier: n
              Literal: 1 (int)
  VarDecl: fact5 : int
    FuncCall: factorial
      Literal: 5 (int)
------------------------------------------------------------

FUNCTION VALIDATION RESULTS:
------------------------------------------------------------
Semantic errors detected:
  • Semantic Error at line 18, col 5: Function 'missing_return' must return a value of type 'int'
  • Semantic Error at line 25, col 9: Function must return 'bool', got 'int'
  • Semantic Error at line 40, col 22: Function 'add' expects 2 arguments, got 1
  • Semantic Error at line 41, col 26: Argument 1 to function 'add' expects 'int', got 'float'
  • Semantic Error at line 41, col 31: Argument 2 to function 'add' expects 'int', got 'float'
  • Semantic Error at line 42, col 32: Argument 1 to function 'multiply' expects 'float', got 'int'
  • Semantic Error at line 42, col 35: Argument 2 to function 'multiply' expects 'float', got 'int'
  • Semantic Error at line 42, col 5: Cannot initialize variable 'error3' of type 'bool' with expression of type 'float'
  • Semantic Error at line 43, col 22: Undeclared function 'undefined_func'

Error category summary:
  missing_return: 1
  wrong_return_type: 1
  argument_mismatch: 5
  undeclared_function: 1
  type_mismatch: 1

Function validation analysis completed

FUNCTION VALIDATION: Successfully completed

================================================================================

